#!/usr/bin/env node

const supertest = require('supertest');
const c = require('colors');
const portLib = require('../lib/port.lib');
const { isJson } = require('../lib/validator.lib');
const settings = require('../config/settings');

const log = console.log;
const port = portLib();
const request = supertest('http://localhost:' + port);

/**
 * 处理报文返回结果
 */
function result(res) {
  return isJson(res.body) ? res.body : { code: '', message: '' };
}

/**
 * 检测安装状态
 */
function statusTest(cb) {
  request
    .get('/backstage-api/install')
    .expect(200)
    .end(function(err, res) {
      const { code, message } = result(res);
      if (code === '0000') {
        log(c.green('  ✅ Installable'));
        cb();
      } else {
        log(c.red('  ❌ Not installable(' + message + ')'));
      }
    });
}

/**
 * 检测数据库
 */
function mongodbTest(cb) {
  request
    .put('/backstage-api/install/test-database')
    .send(settings.mongodb)
    .expect(200)
    .end(function(err, res) {
      const { code, message } = result(res);
      if (code === '0000') {
        log(c.green('  ✅ Pass'));
        cb();
      } else {
        log(c.red('  ❌ Fail(' + message + ')'));
      }
    });
}

/**
 * 检测redis
 */
function redisTest(cb) {
  request
    .put('/backstage-api/install/test-redis')
    .send(settings.redis)
    .expect(200)
    .end(function(err, res) {
      const { code, message } = result(res);
      if (code === '0000') {
        log(c.green('  ✅ Pass'));
        cb();
      } else {
        log(c.red('  ❌ Fail(' + message + ')'));
      }
    });
}

/**
 * 安装
 */
function install(cb) {
  request
    .post('/backstage-api/install')
    .send({
      dbHost: settings.mongodb.host,
      dbPort: settings.mongodb.port,
      db: settings.mongodb.db,
      dbUser: settings.mongodb.user,
      dbPassword: settings.mongodb.pass,
      rdHost: settings.redis.host,
      rdPort: settings.redis.port,
      rdFamily: settings.redis.family,
      rdDb: settings.redis.db,
      rdPass: settings.redis.pass,
      title: settings.cms.title,
      email: settings.cms.email,
      password: settings.cms.password,
    })
    .expect(200)
    .end(function(err, res) {
      const { code, message } = result(res);
      if (code === '0000') {
        log(c.green('  ✅ Installable'));
        cb();
      } else {
        log(c.red('  ❌ Not installable(' + message + ')'));
      }
    });
}

/**
 * 执行函数
 */
(function run() {
  log(c.yellow('Start installing the hotchcms'));
  log(c.yellow('1. Detect installation status'));
  statusTest(function () {
    log(c.yellow('2. Detect database'));
    mongodbTest(function () {
      log(c.yellow('3. Detect redis'));
      redisTest(function () {
        log(c.yellow('4. Install'));
        install(function () {
          log(c.green('Finish !!! Welcome to hotchcms !!!'));
        })
      })
    })
  })
})();