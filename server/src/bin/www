#!/usr/bin/env node

const http = require('http');
const path = require('path');
const app = require('../app');
const portLib = require('../lib/port.lib');
const logger = require('../lib/logger.lib');
const mongodb = require('../lib/mongodb.lib');
const redis = require('../lib/redis.lib');
const installLib = require('../lib/install.lib');

const port = portLib();

// appDir 项目基础目录
const appDir = path.resolve(__dirname, '..');

// logDir 日志目录
const logDir = path.join(appDir, 'logs');

(async (resolve, reject) => {

  /**
   * 1 ===================================
   * 创建、检查日志目录
   */
  try {
    await require('fs').mkdirSync(logDir);
  } catch (e) {
    if (e.code != 'EEXIST') {
      console.error('无法设置日志目录:', e)
      process.exit(1)
    }
  }

  /**
   * 2 ===================================
   */
  try {
    // 检查安装锁
    const hasInstall = await installLib.status();
    if (hasInstall) {
      // 连接 mongodb redis
      await mongodb.connect();
      await redis.connect();
    }

    //创建 HTTP 服务器
    const server = http.createServer(app.callback());

    //监听端口
    server.listen(port);

    server.on('error', (error) => {
      if (error.syscall !== 'listen') throw error;

      const bind = typeof port === 'string' ? 'pipe ' + port : 'port ' + port;

      switch (error.code) {
        case 'EACCES':
          logger().error(port + ' 需要有更高的权限');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          logger().error(port + ' 端口被占用');
          process.exit(1);
          break;
        default:
          throw error;
      };

    });

    server.on('listening', () => {
      const addr = server.address();
      const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
      logger().info('服务启动, 端口: ' + bind);
    });
  } catch (e) {
    logger().error('启动失败, 原因: ', JSON.stringify(e));
  }
})();